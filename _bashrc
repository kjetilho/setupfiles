# .bashrc

case $LD_PRELOAD in
    ?*)
        # Set by replacebell -- we don't want this to stick around
        unset LD_PRELOAD
        ;;
esac

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# User specific aliases and functions

case $(uname) in
    SunOS)
	export PATH=/usr/mysql/bin:/usr/bin:/usr/local/bin:/usr/sbin:/sbin:/usr/local/sbin:/usr/gnu/bin
	;;
esac

mypath=$HOME/.rbenv/bin:$HOME/node_modules/.bin:$HOME/bin:/usr/java/latest/bin:/opt/vagrant/bin:$PATH:/stat/local/bin

if [ -x /usr/local/bin/cknfs ]
then
    echo -n "cknfs ... " >&2
    checked_path=$(/usr/local/bin/cknfs -q -t 2 -su $mypath)
    if [ -n "$checked_path" ]
    then
        export PATH="$checked_path"
        echo done >&2
    else
        echo fail >&2
    fi
else
    export PATH=$mypath
fi

if type rbenv >/dev/null 2>&1
then
    eval "$(rbenv init -)"
    rubyver23=$(rbenv versions | tac | awk '$1 ~ /^2\.3\./ {print $1}')
fi

if [ -d $HOME/lib/perl/share/perl ]
then
    export PERL5LIB=$(echo $HOME/lib/perl/share/perl/5.* | tr " " :)
fi

if [ -d /opt/python ]
then
    export PYTHONPATH=/opt/python/lib/python2.7/site-packages
fi

if type podman >/dev/null 2>&1
then
    export DOCKER=podman
fi

# If not running interactively, don't do anything more
######################################################
[ -z "$PS1" ] && return

# Does $- contain "i" for interactive?  We remove i* and see that the
# value is unchanged.
[ ${-%i*} = $- ] && return

# TAB completion rules
declare -a hosts
if [ -e ~/.ssh/known_hosts ]; then
    hosts=(`awk -F"[ ,]" '/^([0-9]+[.]|\[)/ { next } {print $1}' ~/.ssh/known_hosts`)
fi
if [ -e ~/.ssh/config ]; then
    hosts=(${hosts[*]} `awk '/^Host [a-z0-9.-]+ *$/ { print $2 }' ~/.ssh/config`)
fi
complete -r
complete -W "${hosts[*]}" ssh ssh-keygen telnet nc ping ping6 host showmount mtr traceroute vlan cssh console
complete -W "${hosts[*]}" -o default scp rsync bacula-conf thruk

for comp in /usr/share/bash-completion/completions/pass /etc/bash_completion.d/password-store
do
    if [ -e "$comp" ]
    then
        . "$comp"
        break
    fi
done

scp() {
    local -a args=("$@")
    local last_arg=$(( ${#args[@]} - 1))
    case ${args[$(( last_arg - 1))]} in
        *:*)
            # okay, penultimate argument is a remote source, don't
            # change target argument.
            ;;
        *)
            case ${args[$last_arg]} in
                *:*|*/*)
                    # last argument is a remote source
                    ;;
                *)
                    echo "(fixing destination)" >&2
                    args[$last_arg]="${args[$last_arg]}:"
                    ;;
            esac
            ;;
    esac
    command scp ${args[@]}
}

if [ -e $HOME/.work-password-store ]
then
	alias workpass='PASSWORD_STORE_GPG_OPTS="--trust-model always" PASSWORD_STORE_DIR=~/.work-password-store ${HOME}/.work-password-store/bin/pass'
	. ${HOME}/.work-password-store/bin/workpass.bash-completion
fi

if [ "$BASH_VERSINFO"0 -ge 40 ]
then
    shopt -s globstar
fi

_rl="`tput rmm`"
_titlebar='\e]0;${CHOOSEHOST+» }\u@\H ${OS_PROJECT_NAME+«${OS_PROJECT_NAME}»}\a'
_titlebar='\e]0;${CHOOSEHOST+» }\u@\H\a'
_status='\e[$(($??1:0))m'
_prompt=': [\u@\h \w];'
_reset='\[\e[0m\]'

case $TERM in
	linux)	PS1="\[${_status}\]${_prompt}${_reset} "
		;;
	xterm*|rxvt*)
                # Store exit status in _S_ (if error, PIPESTATUS).
                # Enclose it in {}, this makes it easy to remove "{0} ".
                _func_PC='_PC_() { _S_="{${?/#[1-9]*/${PIPESTATUS[@]}}""} "; }'
                eval $_func_PC
                PROMPT_COMMAND=_PC_
                trap '_PC_() { echo "New window size: ${COLUMNS}x${LINES}"; eval $_func_PC; } ' winch
                _prompt=': ${_S_/#\{0\} /}[\u@\h \w];'
                PS1="\[${_rl}${_titlebar}${_status}\]${_prompt}${_reset} "
		;;
	*)	PS1="${_prompt} "
		;;
esac

export VIMINIT=':set cp
set noai
set nosi
syntax off'
unalias vi la 2>/dev/null

# We don't want ^S
[ -t 0 ] && stty stop undef

if [ disabled = yes -a "$DISPLAY" != "" ]
then
	# Find suitable locale for Evolution
	unset LC_TIME
	for loc in $(locale -a | grep -i 'en_.*utf')
	do
		# why did I want to do this?
		# case $loc in
		# 	en_US*) export LANG=$loc ;;
		# esac
		if [ "$LC_TIME" = "" ]
		then
			[ "$(LC_TIME=$loc date +%p)" = "" ] && export LC_TIME="$loc"
		fi
	done
fi

if [ "$XTERM_LANG" != "" ]
then
    export LANG="$XTERM_LANG"
fi

if [ -n "SSH_CLIENT" ]
then
    export MOSH_SERVER_NETWORK_TMOUT=604800
fi

export LC_COLLATE=C LC_NUMERIC=C
export EDITOR=vi
export PAGER=less

# rspec-puppet
if [ -d ~/git/git.i.bitbit.net/puppet-ms0/basemodules_common/modules/ ]
then
    export MODULEPATH=design:modules:~/git/git.i.bitbit.net/puppet-ms0/basemodules_common/modules/
    export FUTURE_PARSER=yes STRICT_VARIABLES=yes
fi

bN() {
    declare ver="$1";
    declare rubyver=2.1.10
    declare -a cmd=(bundle)
    shift;
    case $ver in
        3|4) rubyver="2.1.10" ;;
        *)   rubyver="${rubyver23-2.3.8}" ;;
    esac
    if [ ! -r .ruby-version ] || [ $(< .ruby-version) != $rubyver ]
    then
        rbenv local $rubyver
    fi
    if [ ! -r .bundle/config ]
    then
        env PUPPET_VERSION="~> $ver.0" PUPPET_GEM_VERSION="~> $ver.0" bundle install --path=$HOME/.cache/bundler/
    fi
    case $1 in
	rake|rspec|gem) cmd=("${cmd[@]}" exec) ;;
    esac
    ourbase=~/git/git.i.bitbit.net/puppet-ms0/basemodules_common/modules
    apibase=~/git/git.i.bitbit.net/puppet-ms4/api_common/modules
    case $PWD in
        */api*)
            export MODULEPATH=design:modules:$apibase:$ourbase
            echo "Adding API base to MODULEPATH: $MODULEPATH"
            ;;
        *)
            export MODULEPATH=design:modules:$ourbase ;;
    esac
    env PUPPET_VERSION="~> $ver.0" PUPPET_GEM_VERSION="~> $ver.0" "${cmd[@]}" "$@"
}
b3() { bN 3 "$@"; }
b4() { bN 4 "$@"; }
b5() { bN 5 "$@"; }
b6() { bN 6 "$@"; }
b() {
    (
        if [ -r Gemfile.lock ]
        then
            version=$(awk '$1 == "puppet" { gsub("[(]|\\..*", "", $2); print $2; exit }' Gemfile.lock)
        fi
        bN ${version-3} "$@"
    )
}
B() {
    case $1 in [0-9]*) version=$1; shift;; *) version=3;; esac
    chmod 1777 spec/fixtures/manifests spec/fixtures/modules
    rm -f spec/fixtures/manifests/site.pp spec/fixtures/modules/${PWD##*/}
    docker run -v $(pwd):/tmp/test:rw -w /tmp/test containers.i.bitbit.net/ci-images/puppet-test:$version "$@"
}

bgem() {
    local gem="$1"; shift
    local -a args
    case $1 in
    -v)
        args=($@) ;;
    [0-9]*)
        args=(-v "$@") ;;
    "")
        : ;;
    *)
        echo "Usage: bgem gemname [version]" >&2;
        return
        ;;
    esac
    b gem contents "$gem" ${args[*]} | grep -v /spec/
}

bfacter() {
    local facterver=$(b exec facter --version | cut -d. -f-2)
    bgem facterdb | fgrep /$facterver/
}

j() {
    if [ $# -gt 0 ]
    then
       local expr="$1"
       shift
       jq "$@" ".[] | $expr"
    else
       jq ".[] | .certname"
    fi
}

grep_options="--directories=skip --colour=auto"
alias grep="grep $grep_options"
alias egrep="egrep $grep_options"
alias fgrep="fgrep $grep_options"

export GREP_COLOR="01"
export LESS="-j4R"
unset LESSOPEN
less() {
    # we only check the first non-option argument for the :linenum suffix
    declare -a opts
    while [ $# -gt 0 ]
    do
        case $1 in
            [-+]*)
                opts=( ${opts[@]} "$1" )
                shift;
                ;;
            *:*)
                if [ ! -e "$1" ]
                then
                    base=${1%:*}
                    num=${1##*:}
                    if [ -e "$base" ]
                    then
                        shift
                        command less -N -j0 +"$num" ${opts[@]} "$base" "$@"
                        return
                    fi
                fi
                break
                ;;
            *)
                break
                ;;
        esac
    done
    command less ${opts[@]} "$@"
}

HISTTIMEFORMAT="%H:%M:%S "
HISTSIZE=50000
HISTFILESIZE=50000
# ikkje lagre kommandoar som startar med ":" (i praksis ":;") eller " " i historikk
HISTIGNORE="\:*: *"
HISTCONTROL=ignoredups

alias ls="ls -F"
alias hsot=host
alias mv="mv -i"

bind "set prefer-visible-bell Off"
bind '"\en": history-search-forward'
bind '"\ep": history-search-backward'
bind "set mark-modified-lines On"
bind "set revert-all-at-newline On"
bind 'Control-g: "git branch\n"'

ssh() {
    local conf=$HOME/.ssh/config
    printf '\e]0;%s\a' "$1" >&2

    case $HOSTNAME in
         login-osl1)
             conf="${conf}-old" ;;
    esac
    env TERM=xterm ssh -F "$conf" "$@"
}

cssh() {
    command cssh -o "-F $HOME/.ssh/config " "$@"
}
# pdsh(1) default is rsh
export PDSH_RCMD_TYPE=ssh

percd() {
    history -w
    builtin cd "$@" && {
        [ -d ~/.bash_history.d ] || mkdir -p ~/.bash_history.d
        HISTFILE=$HOME/.bash_history.d/${PWD//\//_}
        history -c
        if [ -r $HISTFILE ]
        then
            history -r
        fi
    }
}

stderr() { echo "$@" >&2; }

nosvn() {
    find . \( -type d \( -name .svn -o -name .git \) -prune \) -o \( "$@" \)
}

newest() {
    if [ -z "$1" ]
    then
        nosvn -printf '%T+ %p\n' | sort -rn | head -1
    else 
        find . \( -type d -name '.svn' -prune \) -o \
            \( "$@" -printf '%T+ %p\n' \) | sort -rn | head -1
    fi
}

set +f  # so a reload of .bashrc fixes it
alias finn='set -f; do_finn'
do_finn() {
    name="$1"; shift;
    if echo "$name" | grep '^[a-zA-Z0-9_.-]*$' >/dev/null
    then
        name="*$name*"
    fi
    case $1 in
        [a-zA-Z]*)
            nosvn -name "$name" -print0 | xargs -0 "$@"
            ;;
        *)
            nosvn -name "$name" "$@" -print
            ;;
    esac
    set +f
}

forallf() {
    nosvn -type f -print0 | xargs -0 "$@"
}

foralld() {
    nosvn -type d -print0 | xargs -0 "$@"
}

hdr() {
    nosvn -type f \( -name '*.h' -o -name '*.hh' \) -print0 | xargs -0 "$@"
}

src() {
    nosvn -type f \( \
           -name '*.[physicCl]' \
           -o -name '*.p[lmyp]' \
           -o -name '*.cc' \
           -o -name '*.hh' \
           -o -name '*.cpp' \
	   -o -name '*.rb' \
	   -o -name '*.erb' \
	   -o -name '*.cf' \
	   -o -name '*.cfg' \
	   -o -name '*.conf' \
	\) -print0 | xargs -0 "$@"
}

edit_last() {
    local prev_output=$(fc -s "$@")
    if [[ ! "$prev_output" ]]
    then
        echo "No output from last command" >&2
        return
    fi
    local IFS='
'
    local files=($(echo "$prev_output" | sed s/:.*// | sort -u))
    e "${files[@]}"
}

alias e!=edit_last

la() {
    # base 4.3 is confused where to end $() with case inside.
    for p do
        files=`type -a "$p" | while read e
                do
	            case $e in
		        "$p is a"*)
                            echo "$e"
                            ;;
                        "$p ()")
                            # function definition, ignore
                            ;;
                        "$p is "*)
		            echo "$e" | cut -d' ' -f3-
                            ;;
                    esac
	        done` 2>&1
        [ "$files" ] && ls -lL $files
    done
}

File() {
    for file
    do
        [ -L "$file" ] && file=$(readlink -f "$file")
        file "$file"
    done
}

lw() {
    local strings p full
    case $# in
        0)  stderr "Usage: lw [-s] <program> [<program> ...]"
            stderr "View the listed programs. With -s, run strings."
            return
            ;;
        *)  strings=false;
            case $1 in
                -s)  strings=true; shift;;
            esac
            for p do
                full=`type -path "$p"`
                $strings && ( strings "$full" | $PAGER ) || $PAGER "$full"
            done
            ;;
    esac
}

mysudo() {
        HOME=/root pfexec bash
}

myget() {
    local url
    for url; do wget -r -nd -l 1 -A "${url##*/}" "${url%/*}"; done
}

sleep-until() {
    local target=$(date -d "$*" +%s.%N)
    sleep $(echo $target - $(date -d "now" +%s.%N) | bc)
} 

case `uname -n`:$COLUMNS in
    login.redpill-linpro.com:64)
        screen -Urx
        ;;
    *.ms.redpill-linpro.com:*)
        if [ "$CHOOSEHOST" ]
        then
            bind 'set show-all-if-ambiguous On'
            bind 'set page-completions Off'
            bind 'C-w: menu-complete'
            complete -W ssh -E
            unset LC_TIME

            command_not_found_handle() {
                host=$1; shift
                for m in ${hosts[*]}
                do
                    case $m in
                        $host*|$host)
                            case $m/$host in
                                *-mgmt*/*-mg*)
                                    host=$m
                                    break
                                    ;;
                                *-mgmt*/*)
                                    : # ignore mgmt address unless specified
                                    ;;
                                *)
                                    host=$m
                                    break
                                    ;;
                            esac
                            ;;
                    esac
                done

                for m in ${hosts[*]}
                do
                    case $m in
                        $host.*|$host)
                            host=$m
                            break
                            ;;
                    esac
                done
                case $1 in
                    cl|clean)
                        ssh-keygen -R $host
                        ;;
                    *)
                        echo "logging in to $host ... "
                        ssh $host "$@"
                        ;;
                esac
            }
        fi
        ;;
esac

stockprice() {
    local date="$1"
    local ticker="$2"
    # charmap=$(locale -c charmap | tail -1)
    curl -s "http://hopey.netfonds.no/paperhistory.php?paper=$ticker&csv_format=txt"| egrep "^(quote|$date)" | iconv -f latin1 -t utf8 | sed "s/ Børs//"
}

function repeat() {
        declare -i num=$1; shift
        while [ $num -gt 0 ]; do
                "$@" || return
                num=num-1
        done
}

function up () { 
        case $# in 
                0) cd ..
                   ;;
                1) savepwd=$PWD;
                   repeat $1 cd ..;
                   OLDPWD=$savepwd
                   ;;
        esac
}

# Usage: g [print] <substring> [<restriction>]
# "g _net"     will do cd ~/git/git.i.bitbit.net/puppet-ms0/bitbit_net
# "g _net ans" will do cd ~/git/git.i.bitbit.net/ansible/bitbit_net
#
# With "print", list all possible matches.  Without "print", the
# first match will be used as new current directory.
#
g() {
    local cd=cd
    if [ $# -gt 1 -a "$1" = print ]
    then
        cd=echo; shift
    fi
    case $1 in
        -|"")            cd - ;;
        /*)              cd "$1" ;;
        p|pu)            $cd ~/svn/puppet ;;
        pup|pupp|puppet) $cd ~/git/git.i.bitbit.net/puppet-mod/puppet ;;
        ici)             $cd ~/git/git.i.bitbit.net/icinga/config ;;
        meta)            $cd ~/git/git.i.bitbit.net/mirror/meta ;;
        *)
            for p in "git/git.i.bitbit.net/*/$1" \
                     "git/git.i.bitbit.net/*/$1*" \
                     "git/gitlab.redpill-linpro.com/$1*" \
                     "git/git.i.bitbit.net/puppet*/*$1*" \
                     "git/git.i.bitbit.net/*/*$1*" \
                     "git/gitlab.redpill-linpro.com/*/*$1*" \
                     "svn/$1*" \
                     "git/github.com/*/$1*" \
                     "git/*/*$1*"
            do
                for m in $HOME/$p/
                do
                    if [ -d "$m" ] # could be unexpanded with "*" intact
                    then
                        case "$m" in
                            $HOME/*"$2"*)
                                if [ $cd = cd ]
                                then
                                    cd "$m" && return
                                else
                                    $cd "$m" | egrep "($1|$2)"
                                fi
                                ;;
                        esac
                    fi
                done
            done
            ;;
    esac
}

# Jump to webpage for current git repo
# Usage: gw [--print] [FILE] [REMOTE]
# Default remote is "origin"
gw() {
    local file xdg_open=${XDG_OPEN-xdg-open}
    if [ "$1" = "--print" ]
    then
        xdg_open=echo; shift
    fi
    if [ "$1" -a -e "$1" ]
    then
        file="$1"; shift
    fi
    local origin="${1-origin}"
    local giturl=$(git remote get-url $origin) || return
    local url=$(echo "$giturl" | sed -e 's|^[a-z]\+@\([^:]\+\):|https://\1/|' -e 's|\.git$||')
    if [ "$file" ]
    then
        local branch=$(git branch --show-current)
        url="${url}/-/blob/${branch}/${file}"
    fi
    ${xdg_open} "$url"
}
gmv() {
    local from="$1" to="$2"
    case $to in
        */*) : ;;
        *)   to="$to/${from##*/}" ;;
    esac
    base=$HOME/git/git.i.bitbit.net
    if [ ! -d "$base/$from" ]
    then
        echo No such repo
        return
    fi
    new_remote=git@git.i.bitbit.net:$to.git
    echo Updating $from to $new_remote
    cd $base
    mv "$from" "$to"
    cd $to
    git remote set-url origin $new_remote
}
        
_gclone() {
    local server="$1"
    shift
    declare -a args=("$@")
    # get last argument, remove trailing / if present
    local proj="${args[${#args[@]} - 1]%/}"
    # remove last argument
    unset "args[${#args[@]} - 1]"
    url="git@${server}:${proj}.git"
    dir=$(dirname ~/git/$server/$proj)
    mkdir -p $dir
    cd $dir &&
	git clone "${args[@]}" $url &&
	cd ~/git/$server/$proj
}
gfork() {
    local user=${1-$USER}
    local fork=$(git remote get-url origin | sed "s,:[^/]*,:$user,")
    git remote add $user $fork
}
gclone() {
    _gclone git.i.bitbit.net "$@"
}
grlclone() {
    _gclone gitlab.redpill-linpro.com "$@"
}
ghclone() {
    _gclone github.com "$@"
}
glclone() {
    _gclone gitlab.com "$@"
}

gitmr() {
    local branch automerge merge current_main
    read -p "Name of feature branch: " branch
    if [[ -z $branch ]]
    then
        echo "aborting."
        return
    fi
    read -p "Auto-merge? [no] " automerge
    case $automerge in
        y|yes)
            merge="-o merge_request.merge_when_pipeline_succeeds"
            ;;
    esac
    current_main=$(git branch --show-current)
    git push -o merge_request.create $merge origin "${current_main}":"${branch}"
}

upd() {
    (cd $HOME/svn
    for m in puppet
    do
        (cd $m 2>/dev/null && svn up)
    done
    cd $HOME/git/git.i.bitbit.net
    for m in */*
    do
        (cd $m && git pull --ff-only)
    done
    )
}
h() {
    for m in ${hosts[*]}
    do
        case $m in
            *$1*)
                echo $m;
                ;;
        esac
    done
}

# output from portloginshow
function fe() {
    case $1 in
        *:*:*)
            wwn="$1"
            ;;
        *)
            wwn="$2"
            ;;
    esac
    grep -h -i -B 4 $wwn $HOME/tmp/*-zone | grep 'Zone:'
}

function horse() {
    local lang="${1-en}" words=${2-4}
    for i in a b c d e
    do
        echo $(aspell -d $lang dump master | egrep -v '.{11}' | tr -d \" | shuf -n $words)
    done
}
alias horse-en="horse en"

alias cwdiff="wdiff -n -w $'\033[30;41m' -x $'\033[0m' -y $'\033[30;42m' -z $'\033[0m'"
alias qr="xclip -o selection clipboard | qrencode --size 10 -o - | feh -x --title QR -g +200+200 -"
alias trunc='cut -c-${COLUMNS-80}'
alias mtr='env TERM=vt220 mtr'

osinit() {
    case $1 in
        --clear)
            unset $(set | grep ^OS_ | cut -d= -f1)
            shift
            [ $# = 0 ] && return
            ;;
        '')
            echo "Current project is '$OS_PROJECT_NAME'"
            return
            ;;
    esac
    local proj="$1"
    export OS_COMPUTE_API_VERSION=2.53 # To access all Pike features
    if [ "$OS_PROJECT_NAME" = "" -o "$OS_PROJECT_NAME" != "$proj" ]
    then
        if [ -r $HOME/.config/openstack/$proj-openrc.sh ]
        then
            . $HOME/.config/openstack/$proj-openrc.sh
        else
            echo "No openrc-file for '$proj'" >&2
        fi
    fi
}
complete -W "$(cd $HOME/.config/openstack; echo *-openrc.sh | sed s/-openrc.sh//g)" osinit

axfr-2a02() {
    dig axfr 0.c.0.0.2.0.a.2.ip6.arpa. @ns-foo.i.bitbit.net |
        perl -pe 's/(\S+)\.ip6\.arpa\./reverse($1)/e' | grep ^2 | sort
}
axfr-10() {
    dig axfr 10.in-addr.arpa. @ns-foo.i.bitbit.net |
        perl -pe 's/(\S+)\.in-addr.arpa\./join(".", reverse(split(m{[.]}, $1))) . "\t"/e' | grep ^1 | sort
}
axfr() {
    case $1 in
        [1-9]*.[1-9]*)
             dom=$(perl -e 'print join(".", reverse(split(/\./, $ARGV[0])), "in-addr.arpa")' $1)
             ;;
        *.*) dom="$1" ;;
        *)   dom="$1.bitbit.net" ;;
    esac
    dig axfr $dom @ns-foo.i.bitbit.net
}
whois.no() {
    ssh login-osl2.i.bitbit.net whois -h registrarwhois.norid.no "$@";
}
mdview() {
    pandoc -t html -o /dev/stdout "$1" | w3m -T text/html
}
nsupd() {
    nsupdate -k$HOME/.config/dns/$USER.user.private "$@"
}
lc() {
    tr '[:upper:]' '[:lower:]'
}
uc() {
    tr '[:lower:]' '[:upper:]'
}
tomquiz() {
    local num="$1"
    local dir=$HOME/Documents/quiz/tom
    local count=$(ls -1 $dir/$num.*.xlsx 2>/dev/null | wc -l)
    if [ "$count" -ne 1 ]; then echo "$count matching PDF files"; return; fi
    xdg-open $dir/$num.*.pdf &
    xdg-open $dir/$num.*.xlsx &
}

alias r='. ~/.bashrc'
