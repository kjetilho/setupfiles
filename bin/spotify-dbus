#! /usr/bin/perl

use Getopt::Long;
use Data::Dumper;

my @verbs = qw(PlayPause Stop Next Previous);
my $format = "%status: %artist: «\%title» (track \%tracknumber on «\%album») [\%autorating]";

sub usage {
    my $verblist = join('|', @verbs);
    printf STDERR <<"END";
Usage: $0 [--verbose] {$verblist}

Sends command to Spotify over dbus.

or     $0 [--format=FMT] Metadata

Print metadata about currently playing song.  FMT can be 'json' or a
text string where fieldnames prefixed with '%' are replaced.
END
    print STDERR "Default format is '$format'.\n";
    exit 64;
}

my $verbose;
GetOptions('format=s' => \$format,
           'verbose|v+' => \$verbose,
    ) or usage();

usage() unless @ARGV == 1;
my $verb = shift;
usage() unless $verb eq 'Metadata' or grep { $_ eq $verb } @verbs;

my @cmd = qw(dbus-send
    --dest=org.mpris.MediaPlayer2.spotify
    /org/mpris/MediaPlayer2);

sub decode_type {
    my ($t) = @_;
    if ($t =~ /^array \[/) {
        return [];
    } elsif ($t =~ /^string "(.*)"/) {
        return $1;
    } elsif ($t =~ /^(u?int(32|64)) (-?\d+)/) {
        return $3;
    } elsif ($t =~ /^double (-?\d*(\.\d*)?)/) {
        return $1;
    } else {
        print STDERR "UNKNOWN data format [$t]\n";
    }
}

sub dbus_properties_get {
    my ($prop, $initial_key) = @_;
    my @fullcmd = (@cmd, '--print-reply',
                   'org.freedesktop.DBus.Properties.Get',
                   'string:org.mpris.MediaPlayer2.Player', "string:$prop");
    print STDERR join(' ', 'Running:', @fullcmd), "\n"
        if $verbose;
    my $key = lc($initial_key) if $initial_key;
    my %meta;
    if (open(my $dbus, '-|', @fullcmd)) {
        my $stats = <$dbus>;
        exit(8) unless $stats;
        while (<$dbus>) {
            print STDERR "RESPONSE: ", $_ if $verbose > 1;
            s/^\s+//;
            if (/^dict entry/) {
                $key = undef;
                $val = undef;
            } elsif (!defined $key && /^string "(xesam:|mpris:)?(.*)"/) {
                # we simplify keys from "xesam:discNumber" to just "discnumber"
                $key = lc $2;
            } elsif (!defined $val) {
                if (/^variant\s*(.*)/) {
                    $val = decode_type($1);
                }
            } elsif (/^[\)\]]$/) {
                $meta{$key} = $val if defined $key && defined $val;
                $val = undef;
            } elsif (ref $val eq 'ARRAY') {
                push(@{$val}, decode_type($_));
            }
        }
        $meta{$key} = $val if defined $key && defined $val;
        close($dbus);
    }
    use Data::Dumper;
    print Dumper(\%meta) if $verbose;
    return $initial_key ? $meta{$initial_key} : \%meta;
}

if ($verb eq 'Metadata') {
    my $x = dbus_properties_get('Metadata');
    if ($x) {
        my %meta = %{$x};
        if ($format =~ /%status/) {
            $meta{status} = dbus_properties_get('PlaybackStatus', 'status');
        }
        if ($format eq 'json') {
            # avoid 0.1 second load time and only load when needed
            # ("use" loads always, even inside ifs)
            eval 'require JSON;';
            print JSON::encode_json(\%meta);
        } else {
            $format =~ s/%([a-z_]+)/ref $meta{$1} ? join(', ', @{$meta{$1}}) : $meta{$1}/ge;
            print $format, "\n";
        }
    } else {
        die;
    }
} else {
    if ($verbose) {
        push(@cmd, '--print-reply');
    } else {
        push(@cmd, '--type=method_call');
    }
    system(@cmd, "org.mpris.MediaPlayer2.Player.$verb");
    system('pkill -USR1 -x i3status');
}
