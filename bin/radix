#! /usr/bin/perl -C127

use warnings;
use strict;
use utf8;
use Encode qw(decode encode);
use charnames qw(:full);
use Getopt::Long;

sub usage {
    print STDERR "Usage: $0 [--octal] [--utf8]\n";
    exit(64);
}

my ($octal, $utf8, $compose);

GetOptions(
    'octal|o' => \$octal,
    'utf8|U' => \$utf8,
    'compose|C' => \$compose,
    ) or usage();

if ($compose) {
    $compose = read_compose_table();
}

my $collect_unicode_octets;

for (@ARGV) {
    my $code;
  another_iteration:
    if (/^0x[0-9a-f]+$/i || /^0b[01]+$/ || /^\d+$/) {
        my $code = (/^0/ || $octal) ? oct($_) : $_;
        if ($utf8) {
            $collect_unicode_octets .= pack('C', $code);
        } elsif ($code <= 0x10FFFD && defined charnames::viacode($code)) {
            if ($code <= 0xff) {
                printf("%7s 0%03o %5d 0b%08b %c   %s\n",
                       fmt_hex($code), ($code)x4, charname($code));
            } else {
                printf("%7s   %8d            %c   %s\n",
                       fmt_hex($code), ($code)x2, charname($code));
            }
        } else {
            printf("%7s %7d %s %s\n",
                   fmt_hex($code), $code, fmt_human($code), fmt_human_dur($code));
        }
    } elsif (/^<?U\+([0-9a-f]+)>?( |<|$)/i) {
        my $code = hex($1);
        if ($code <= 0x10FFFD && defined charnames::viacode($code)) {
            printf("U+%05X %7d %10s %c   %s\n",
                   ($code)x2, '', $code, charname($code));
        } else {
            printf("U+%05X %7d\n", ($code)x2);
        }
        goto another_iteration if s/^<?U\+([0-9a-f]+)>? *//i;
    } else {
        print_string($_);
    }
}
if ($utf8) {
    print_string(decode('utf8', $collect_unicode_octets));
}

sub print_string {
    for (split(//, $_[0])) {
        my $code = ord($_);
        if ($code <= 255) {
            printf("%7s 0%03o %5d 0b%08b %c   %s\n",
                   fmt_hex($code), ($code)x4, charname($code));
        } else {
            printf("U+%05X    %7d %10s %c   %s\n",
                   ($code)x2, '', $code, charname($code));
        }
    }
}

sub fmt_human {
    my ($num) = @_;
    my @units = qw(Ki Mi Gi Ti Pi Ei);
    my $unit;
    while ($num > 2047 && @units) {
        $unit = shift(@units);
        $num /= 1024;
    }
    sprintf("%d%s", $num, $unit || '');
}

# This is used for 0x110000 or higher, ie. 12.9 days
# or when there is no known Unicode known
sub fmt_human_dur {
    my ($num) = @_;
    my $days = $num / 86400;

    if ($days > 365) {
        sprintf("%dy%dd", $days / 365, $days % 365);
    } elsif ($days > 100) {
        sprintf("%dd", $days);
    } elsif ($days > 1) {
        sprintf("%.1fd", $days);
    } else {
        sprintf("%.1fh", ($num % 86400) / 60);
    }
}

sub fmt_hex {
    sprintf("0x%X", shift);
}

sub charname {
    my $code = shift;

    my $name = charnames::viacode($code);
    return unless defined $name;

    if ($compose) {
        my $symbol = sprintf("%c", $code);
        $name .= " (" . join("|", @{$compose->{$symbol}}) . ")"
            if defined $compose->{$symbol};
    }
    return $name;
}

sub read_compose_table {
    my $compose_file = '/usr/share/X11/locale/en_US.UTF-8/Compose';
    open(my $f, $compose_file)
        or return warn "$compose_file: $!\n";
    my %table;
    while (<$f>) {
        if (/^<Multi_key>\s+(.*?)\s+:\s*"(.*?)"/) {
            my ($keys, $symbol) = ($1, $2);
            $keys =~ s/[<>]//g;
            $table{$symbol} ||= [];
            push(@{$table{$symbol}}, $keys);
        }
    }
    close($f);
    return \%table;
}
