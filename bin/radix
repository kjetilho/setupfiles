#! /usr/bin/perl -C127

use warnings;
use strict;
use utf8;
use Encode qw(decode encode);
use charnames qw(:full);
use Getopt::Long;

sub usage {
    print STDERR "Usage: $0 [--octal] [--utf8]\n";
    exit(64);
}

my ($octal, $utf8);

GetOptions(
    'octal|o' => \$octal,
    'utf8|U' => \$utf8,
    ) or usage();

my $collect_unicode_octets;

for (@ARGV) {
    my $code;
    if (/^0x[0-9a-f]+$/i || /^0b[01]+$/ || /^\d+$/) {
        my $code = (/^0/ || $octal) ? oct($_) : $_;
        if ($utf8) {
            $collect_unicode_octets .= pack('C', $code);
        } elsif ($code <= 0x10FFFD && defined charnames::viacode($code)) {
            if ($code <= 0xff) {
                printf("%7s 0%03o %5d 0b%08b %c   %s\n",
                       fmt_hex($code), ($code)x4, charnames::viacode($code));
            } else {
                printf("%7s   %8d            %c   %s\n",
                       fmt_hex($code), ($code)x2, charnames::viacode($code));
            }
        } else {
            printf("%7s %7d %s\n",
                   fmt_hex($code), $code, fmt_human($code));
        }
    } elsif (/^U\+([0-9a-f]+)$/i) {
        my $code = hex($1);
        if ($code <= 0x10FFFD && defined charnames::viacode($code)) {
            printf("U+%05X %7d %10s %c   %s\n",
                   ($code)x2, '', $code, charnames::viacode($code));
        } else {
            printf("U+%05X %7d\n", ($code)x2);
        }
    } else {
        print_string($_);
    }
}
if ($utf8) {
    print_string(decode('utf8', $collect_unicode_octets));
}

sub print_string {
    for (split(//, $_[0])) {
        my $code = ord($_);
        if ($code <= 255) {
            printf("%7s 0%03o %5d 0b%08b %c   %s\n",
                   fmt_hex($code), ($code)x4, charnames::viacode($code));
        } else {
            printf("U+%05X    %7d %10s %c   %s\n",
                   ($code)x2, '', $code, charnames::viacode($code));
        }
    }
}

sub fmt_human {
    my ($num) = @_;
    my @units = qw(Ki Mi Gi Ti Pi Ei);
    my $unit;
    while ($num > 2047 && @units) {
        $unit = shift(@units);
        $num /= 1024;
    }
    sprintf("%d%s", $num, $unit);
}

sub fmt_hex {
    sprintf("0x%X", shift);
}
